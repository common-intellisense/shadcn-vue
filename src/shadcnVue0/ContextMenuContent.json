{
  "name": "ContextMenuContent",
  "props": {
    "loop": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "When true, keyboard navigation will loop from last item to first, and vice versa.",
      "description_zh": "如果为 true，键盘导航将从最后一项循环到第一项，反之亦然。"
    },
    "forceMount": {
      "default": "",
      "value": "",
      "type": "boolean",
      "description": "Used to force mounting when more control is needed. Useful when controlling animation with Vue.js animation libraries. It inherits from ContextMenu.Portal.",
      "description_zh": "用于在需要更多控制时强制安装。在使用 Vue.js 动画库控制动画时很有用。它继承自 ContextMenu.Portal。"
    },
    ":alignOffset": {
      "default": "0",
      "value": "",
      "type": "number",
      "description": "The vertical distance in pixels from the anchor.",
      "description_zh": "与锚点的垂直距离（以像素为单位）。"
    },
    "avoidCollisions": {
      "default": "true",
      "value": "",
      "type": "boolean",
      "description": "When true, overrides the side and align preferences to prevent collisions with boundary edges.",
      "description_zh": "如果为 true，则覆盖侧和对齐首选项，以防止与边界边发生冲突。"
    },
    "collisionBoundary": {
      "default": "[]",
      "value": "",
      "type": "Element | null | Array<Element | null>",
      "description": "The element used as the collision boundary. By default this is the viewport, though you can provide additional element(s) to be included in this check.",
      "description_zh": "用作碰撞边界的元素。默认情况下，这是视口，但您可以提供要包含在此检查中的其他元素。"
    },
    ":collisionPadding": {
      "default": "0",
      "value": "",
      "type": "number | Partial<Record<Side, number>>",
      "description": "The distance in pixels from the boundary edges where collision detection should occur. Accepts a number (same for all sides), or a partial padding object, for example: { top: 20, left: 20 }.",
      "description_zh": "与应进行碰撞检测的边界边缘之间的距离（以像素为单位）。接受一个数字（所有边都相同）或部分填充对象，例如：{ top： 20， left： 20 }。"
    },
    "sticky": {
      "default": "\"partial\"",
      "value": [
        "partial",
        "always"
      ],
      "type": "partial / always",
      "description": "The sticky behavior on the align axis. \"partial\" will keep the content in the boundary as long as the trigger is at least partially in the boundary whilst \"always\" will keep the content in the boundary regardless.",
      "description_zh": "对齐轴上的粘性行为。只要触发器至少部分在边界中，“partial”就会将内容保留在边界中，而“always”将始终将内容保留在边界中。"
    },
    "hideWhenDetached": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "Whether to hide the content when the trigger becomes fully occluded.",
      "description_zh": "是否在触发器完全遮挡时隐藏内容。"
    },
    "as": {
      "default": "div",
      "value": "",
      "type": "string | Component",
      "description": "The element or component this component should render as. Can be overwrite by asChild",
      "description_zh": "此组件应呈现为的元素或组件。可以被 asChild 覆盖"
    },
    "asChild": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "Change the default rendered element for the one passed as a child, merging their props and behavior.",
      "description_zh": "更改作为子元素传递的默认渲染元素，合并其道具和行为。"
    }
  },
  "events": [
    {
      "name": "closeAutoFocus",
      "params": "(event: Event) => void",
      "description": "Event handler called when focus moves to the trigger after closing. It can be prevented by calling event.preventDefault.",
      "description_zh": "关闭后焦点移动到触发器时调用的事件处理程序。可以通过调用 event.preventDefault 来防止它。",
      "value": ""
    },
    {
      "name": "escapeKeyDown",
      "params": "(event: KeyboardEvent) => void",
      "description": "Event handler called when the escape key is down. It can be prevented by calling event.preventDefault.",
      "description_zh": "当转义键关闭时调用的事件处理程序。可以通过调用 event.preventDefault 来防止它。",
      "value": ""
    },
    {
      "name": "pointerDownOutside",
      "params": "(event: PointerDownOutsideEvent) => void",
      "description": "Event handler called when a pointer event occurs outside the bounds of the component. It can be prevented by calling event.preventDefault.",
      "description_zh": "当指针事件发生在组件边界之外时调用的事件处理程序。可以通过调用 event.preventDefault 来防止它。",
      "value": ""
    },
    {
      "name": "focusOutside",
      "params": "(event: FocusOutsideEvent) => void",
      "description": "Event handler called when focus moves outside the bounds of the component. It can be prevented by calling event.preventDefault.",
      "description_zh": "当焦点移出组件边界时调用的事件处理程序。可以通过调用 event.preventDefault 来防止它。",
      "value": ""
    },
    {
      "name": "interactOutside",
      "params": "(event: FocusEvent | MouseEvent | TouchEvent) => void",
      "description": "Event handler called when an interaction (pointer or focus event) happens outside the bounds of the component. It can be prevented by calling event.preventDefault.",
      "description_zh": "当交互（指针或焦点事件）发生在组件边界之外时调用的事件处理程序。可以通过调用 event.preventDefault 来防止它。",
      "value": ""
    }
  ],
  "methods": [],
  "suggestions": [
    "ContextMenuItem",
    "ContextMenuSub",
    "ContextMenuLabel",
    "ContextMenuGroup",
    "ContextMenuCheckboxItem",
    "ContextMenuRadioGroup"
  ],
  "link": "https://www.radix-vue.com/components/context-menu.html",
  "link_zh": "https://www.radix-vue.com/components/context-menu.html"
}
