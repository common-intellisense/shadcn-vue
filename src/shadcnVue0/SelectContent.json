{
  "name": "SelectContent",
  "props": {
    "as": {
      "default": "div",
      "value": "",
      "type": "string | Component",
      "description": "The element or component this component should render as. Can be overwrite by asChild",
      "description_zh": "此组件应呈现为的元素或组件。可以被 asChild 覆盖"
    },
    "asChild": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "Change the default rendered element for the one passed as a child, merging their props and behavior.",
      "description_zh": "更改作为子元素传递的默认渲染元素，合并其道具和行为。"
    },
    "forceMount": {
      "default": "",
      "value": "",
      "type": "boolean",
      "description": "Used to force mounting when more control is needed. Useful when controlling animation with Vue animation libraries.",
      "description_zh": "在需要更多控制时用于强制挂载. 在使用 Vue 动画库控制动画时很有用."
    },
    "position": {
      "default": "item-aligned",
      "value": "",
      "type": "item-aligned / popper",
      "description": "The positioning mode to use. `item-aligned (default)` - behaves similarly to a native MacOS menu by positioning content relative to the active item. `popper` - positions content in the same way as our other primitives, for example `Popover` or `DropdownMenu`.",
      "description_zh": "要使用的定位模式.`item-aligned (默认)` - 通过相对于活动项目定位内容，类似于原生 MacOS 菜单。`popper` - 以与其他原语相同的方式定位内容,例如 `Popover` 或 `DropdownMenu`."
    },
    "bodyLock": {
      "default": "true",
      "value": "",
      "type": "boolean",
      "description": "The document.body will be lock, and scrolling will be disabled.",
      "description_zh": "document.body 将被锁定,滚动将被禁用."
    },
    "side": {
      "default": "top",
      "value": "",
      "type": "top / right / bottom / left",
      "description": "The preferred side of the trigger to render against when open. Will be reversed when collisions occur and avoidCollisions is enabled.",
      "description_zh": "打开时渲染触发器的首选侧面.当发生碰撞并启用 avoidCollisions 时将被反转."
    },
    "sideOffset": {
      "default": "0",
      "value": "",
      "type": "number",
      "description": "The distance in pixels from the trigger.",
      "description_zh": "与触发器的距离（以像素为单位)."
    },
    "align": {
      "default": "center",
      "value": "",
      "type": "start / center / end",
      "description": "The preferred alignment against the trigger. May change when collisions occur.",
      "description_zh": "相对于触发器的首选对齐方式.发生碰撞时可能会改变."
    },
    ":alignOffset": {
      "default": "0",
      "value": "",
      "type": "number",
      "description": "An offset in pixels from the `start` or `end` alignment options.",
      "description_zh": "从 `start` 或 `end` 对齐选项的偏移量()以像素为单位)."
    },
    ":avoidCollisions": {
      "default": "true",
      "value": "",
      "type": "boolean",
      "description": "When `true`, overrides the side and align preferences to prevent collisions with boundary edges.",
      "description_zh": "当 `true` 时，覆盖侧面和对齐偏好,以防止与边界边缘发生碰撞."
    },
    "collisionBoundary": {
      "default": "[]",
      "value": "",
      "type": "Element | null | Array<Element | null>",
      "description": "The element used as the collision boundary. By default this is the viewport, though you can provide additional element(s) to be included in this check.",
      "description_zh": "用作碰撞边界的元素。默认情况下，这是视口，但您可以提供其他元素以包含在此检查中."
    },
    ":collisionPadding": {
      "default": "0",
      "value": "",
      "type": "number | Partial<Record<Side, number>>",
      "description": "The distance in pixels from the boundary edges where collision detection should occur. Accepts a number (same for all sides), or a partial padding object, for example: { top: 20, left: 20 }.",
      "description_zh": "碰撞检测应发生的边界边缘的距离（以像素为单位）。接受一个数字（所有边相同），或一个部分填充对象，例如：{ top: 20, left: 20 }."
    },
    ":arrowPadding": {
      "default": "0",
      "value": "",
      "type": "number",
      "description": "The padding between the arrow and the edges of the content. If your content has border-radius, this will prevent it from overflowing the corners.",
      "description_zh": "箭头与内容边缘之间的填充。如果您的内容具有边框半径，这将防止其溢出角落."
    },
    "sticky": {
      "default": "partial",
      "value": "",
      "type": "partial / always",
      "description": "The sticky behavior on the align axis. `partial` will keep the content in the boundary as long as the trigger is at least partially in the boundary whilst `always` will keep the content in the boundary regardless.",
      "description_zh": "对齐轴上的粘性行为。`partial` 将在触发器至少部分在边界内时将内容保持在边界内，而 `always` 将始终将内容保持在边界内."
    },
    "hideWhenDetached": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "Whether to hide the content when the trigger becomes fully occluded.",
      "description_zh": "当触发器完全闭塞时是否隐藏内容."
    },
    "updatePositionStrategy": {
      "default": "optimized",
      "value": "",
      "type": "optimized / always",
      "description": "Strategy to update the position of the floating element on every animation frame.",
      "description_zh": "在每个动画帧上更新浮动元素位置的策略."
    },
    ":prioritizePosition": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "Force content to be positioned within the viewport. Might overlap the reference element, which may not be desired.",
      "description_zh": "强制内容定位在视口内。可能会与参考元素重叠,这可能不是所需的."
    }
  },
  "events": [
    {
      "name": "closeAutoFocus",
      "params": "(event: Event) => void",
      "description": "Event handler called when focus moves to the trigger after closing. It can be prevented by calling event.preventDefault.",
      "description_zh": "关闭后焦点移动到触发器时调用的事件处理程序。可以通过调用 event.preventDefault 来防止它。",
      "value": ""
    },
    {
      "name": "escapeKeyDown",
      "params": "(event: KeyboardEvent) => void",
      "description": "Event handler called when the escape key is down. It can be prevented by calling event.preventDefault.",
      "description_zh": "当转义键关闭时调用的事件处理程序。可以通过调用 event.preventDefault 来防止它。",
      "value": ""
    },
    {
      "name": "pointerDownOutside",
      "params": "(event: PointerDownOutsideEvent) => void",
      "description": "Event handler called when a pointer event occurs outside the bounds of the component. It can be prevented by calling event.preventDefault.",
      "description_zh": "当指针事件发生在组件边界之外时调用的事件处理程序。可以通过调用 event.preventDefault 来防止它。",
      "value": ""
    }
  ],
  "methods": [],
  "suggestions": [
    "SelectScrollUpButton",
    "SelectViewport",
    "SelectScrollDownButton",
    "SelectArrow"
  ],
  "link": "https://www.radix-vue.com/components/select.html#root",
  "link_zh": "https://www.radix-vue.com/components/select.html#root",
  "dynamicLib": "@/components/ui/select"
}
